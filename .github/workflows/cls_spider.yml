name: 自动更新数据和文章

on:
  schedule:
    # 上午7:00 (北京时间) - 获取韭研公社盘前纪要
    - cron: '00 23 * * 0-4'  # UTC 23:00 = 北京时间 07:00
    # 上午8:00 (北京时间) - 盘前纪要重试
    - cron: '00 0 * * 1-5'   # UTC 00:00 = 北京时间 08:00
    # 上午8:17 (北京时间) - 获取韭研公社盘前解读
    - cron: '17 0 * * 1-5'   # UTC 00:17 = 北京时间 08:17
    # 上午8:27 (北京时间) - 盘前解读重试
    - cron: '27 0 * * 1-5'   # UTC 00:27 = 北京时间 08:27
    # 下午15:30 (北京时间) - 获取财联社涨停池数据
    - cron: '30 7 * * 1-5'   # UTC 07:30 = 北京时间 15:30
    # 晚上23:30 (北京时间) - 获取韭研公社优秀阿呆文章
    - cron: '30 15 * * 1-5'  # UTC 15:30 = 北京时间 23:30
  workflow_dispatch:
    inputs:
      task_type:
        description: '选择执行的任务'
        required: true
        default: 'all'
        type: choice
        options:
        - 'all'
        - 'limitup'
        - 'jiuyan'
        - 'generate'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  run-tasks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 检查文件结构
        run: |
          echo "当前目录内容:"
          ls -la
          echo "Python文件:"
          find . -name "*.py" -type f

      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-dejavu-core

      - name: 安装 Python 依赖
        run: |
          pip install --upgrade pip
          pip install requests beautifulsoup4 python-docx pillow lxml

      - name: 确定脚本文件名
        id: script-name
        run: |
          if [ -f "script.py" ]; then
            echo "script_file=script.py" >> $GITHUB_OUTPUT
          elif [ -f "scraper.py" ]; then
            echo "script_file=scraper.py" >> $GITHUB_OUTPUT
          elif [ -f "main.py" ]; then
            echo "script_file=main.py" >> $GITHUB_OUTPUT
          else
            echo "找不到Python脚本文件"
            exit 1
          fi

      - name: 确定执行任务
        id: determine-task
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "task=${{ github.event.inputs.task_type }}" >> $GITHUB_OUTPUT
          else
            # 根据UTC时间确定任务类型
            hour=$(date -u +%H)
            minute=$(date -u +%M)
            
            # 北京时间7:00 (UTC 23:00前一天)
            if [ "$hour" = "23" ] && [ "$minute" -ge "00" ] && [ "$minute" -lt "10" ]; then
              echo "task=jiuyan_morning_7" >> $GITHUB_OUTPUT
            # 北京时间8:00 (UTC 00:00) - 盘前纪要重试
            elif [ "$hour" = "00" ] && [ "$minute" -ge "00" ] && [ "$minute" -lt "10" ]; then
              echo "task=jiuyan_morning_8_retry" >> $GITHUB_OUTPUT
            # 北京时间8:17 (UTC 00:17) - 盘前解读
            elif [ "$hour" = "00" ] && [ "$minute" -ge "17" ] && [ "$minute" -lt "25" ]; then
              echo "task=jiuyan_morning_817" >> $GITHUB_OUTPUT
            # 北京时间8:27 (UTC 00:27) - 盘前解读重试
            elif [ "$hour" = "00" ] && [ "$minute" -ge "27" ] && [ "$minute" -lt "35" ]; then
              echo "task=jiuyan_morning_827_retry" >> $GITHUB_OUTPUT
            # 北京时间15:30 (UTC 07:30) - 涨停池数据
            elif [ "$hour" = "07" ] && [ "$minute" -ge "30" ] && [ "$minute" -lt "40" ]; then
              echo "task=limitup" >> $GITHUB_OUTPUT
            # 北京时间23:30 (UTC 15:30) - 优秀阿呆
            elif [ "$hour" = "15" ] && [ "$minute" -ge "30" ] && [ "$minute" -lt "40" ]; then
              echo "task=jiuyan_evening" >> $GITHUB_OUTPUT
            else
              echo "task=all" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 执行北京时间7:00任务 (盘前纪要)
        if: steps.determine-task.outputs.task == 'jiuyan_morning_7'
        run: |
          echo "执行盘前纪要爬取 (北京时间7:00)..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 盘前纪要
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行北京时间8:00任务 (盘前纪要重试)
        if: steps.determine-task.outputs.task == 'jiuyan_morning_8_retry'
        run: |
          echo "执行盘前纪要重试 (北京时间8:00)..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 盘前纪要
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行北京时间8:17任务 (盘前解读)
        if: steps.determine-task.outputs.task == 'jiuyan_morning_817'
        run: |
          echo "执行盘前解读爬取 (北京时间8:17)..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 盘前解读
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行北京时间8:27任务 (盘前解读重试)
        if: steps.determine-task.outputs.task == 'jiuyan_morning_827_retry'
        run: |
          echo "执行盘前解读重试 (北京时间8:27)..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 盘前解读
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行北京时间15:30任务 (涨停池数据)
        if: steps.determine-task.outputs.task == 'limitup'
        run: |
          echo "执行涨停池数据获取 (北京时间15:30)..."
          python ${{ steps.script-name.outputs.script_file }} limitup
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行北京时间23:30任务 (优秀阿呆)
        if: steps.determine-task.outputs.task == 'jiuyan_evening'
        run: |
          echo "执行优秀阿呆文章爬取 (北京时间23:30)..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 优秀阿呆
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行所有任务
        if: steps.determine-task.outputs.task == 'all'
        run: |
          echo "执行所有任务..."
          python ${{ steps.script-name.outputs.script_file }} all

      - name: 只生成网页
        if: steps.determine-task.outputs.task == 'generate'
        run: |
          echo "只生成网页文件..."
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 检查文件变化
        id: check-changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "发现文件变化:"
            git status --porcelain
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "没有文件变化"
          fi

      - name: 配置 Git
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: 提交更改
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          # 添加所有相关文件
          git add data/ articles/ assets/ *.html
          
          # 生成提交信息
          task_name="${{ steps.determine-task.outputs.task }}"
          case $task_name in
            "jiuyan_morning_7")
              commit_msg="自动更新: 盘前纪要文章 (北京时间7:00)"
              ;;
            "jiuyan_morning_8_retry")
              commit_msg="自动更新: 盘前纪要文章重试 (北京时间8:00)"
              ;;
            "jiuyan_morning_817")
              commit_msg="自动更新: 盘前解读文章 (北京时间8:17)"
              ;;
            "jiuyan_morning_827_retry")
              commit_msg="自动更新: 盘前解读文章重试 (北京时间8:27)"
              ;;
            "limitup")
              commit_msg="自动更新: 涨停池数据 (北京时间15:30)"
              ;;
            "jiuyan_evening")
              commit_msg="自动更新: 优秀阿呆文章 (北京时间23:30)"
              ;;
            "all")
              commit_msg="自动更新: 所有数据和文章"
              ;;
            "generate")
              commit_msg="更新: 重新生成网页文件"
              ;;
            *)
              commit_msg="自动更新数据"
              ;;
          esac
          
          git commit -m "$commit_msg ($(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S'))" || echo "No changes to commit"
          git push

      - name: 输出执行结果
        run: |
          echo "脚本文件: ${{ steps.script-name.outputs.script_file }}"
          echo "任务类型: ${{ steps.determine-task.outputs.task }}"
          echo "是否有变化: ${{ steps.check-changes.outputs.has_changes }}"
          echo "北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
          echo "UTC时间: $(date '+%Y-%m-%d %H:%M:%S')"

  # 部署到 GitHub Pages (可选)
  deploy-pages:
    needs: run-tasks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.run-tasks.outputs.has_changes == 'true'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
