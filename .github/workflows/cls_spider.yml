name: 自动更新数据和文章

on:
  schedule:
    # 上午7:40 (北京时间) - 获取韭研公社盘前纪要
    - cron: '40 23 * * 0-4'  # UTC 23:40 = 北京时间 07:40
    # 上午8:00 (北京时间) - 盘前纪要重试
    - cron: '00 0 * * 1-5'   # UTC 00:00 = 北京时间 08:00
    # 上午8:17 (北京时间) - 获取韭研公社盘前解读
    - cron: '17 0 * * 1-5'   # UTC 00:17 = 北京时间 08:17
    # 上午8:27 (北京时间) - 盘前解读重试
    - cron: '27 0 * * 1-5'   # UTC 00:27 = 北京时间 08:27
    # 下午16:00 (北京时间) - 获取异动解析数据
    - cron: '00 8 * * 1-5'   # UTC 08:00 = 北京时间 16:00
    # 下午15:30 (北京时间) - 获取财联社涨停池数据
    - cron: '30 7 * * 1-5'   # UTC 07:30 = 北京时间 15:30
    # 晚上23:30 (北京时间) - 获取韭研公社优秀阿呆文章
    - cron: '30 15 * * 1-5'  # UTC 15:30 = 北京时间 23:30
  workflow_dispatch:
    inputs:
      task_type:
        description: '选择执行的任务'
        required: true
        default: 'all'
        type: choice
        options:
        - 'all'
        - 'limitup'
        - 'jiuyan'
        - 'analysis'
        - 'generate'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  run-tasks:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check-changes.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 检查文件结构
        run: |
          echo "当前目录内容:"
          ls -la
          echo "Python文件:"
          find . -name "*.py" -type f

      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-dejavu-core

      - name: 安装 Python 依赖
        run: |
          pip install --upgrade pip
          pip install requests beautifulsoup4 python-docx pillow lxml

      - name: 确定脚本文件名
        id: script-name
        run: |
          if [ -f "script.py" ]; then
            echo "script_file=script.py" >> $GITHUB_OUTPUT
          elif [ -f "scraper.py" ]; then
            echo "script_file=scraper.py" >> $GITHUB_OUTPUT
          elif [ -f "main.py" ]; then
            echo "script_file=main.py" >> $GITHUB_OUTPUT
          else
            echo "找不到Python脚本文件"
            exit 1
          fi

      - name: 确定执行任务
        id: determine-task
        run: |
          # 创建锁文件目录
          mkdir -p .github/locks
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 手动触发：无限制执行
            echo "task=${{ github.event.inputs.task_type }}" >> $GITHUB_OUTPUT
            echo "manual_trigger=true" >> $GITHUB_OUTPUT
            echo "should_execute=true" >> $GITHUB_OUTPUT
            echo "手动触发任务: ${{ github.event.inputs.task_type }}"
          else
            # 自动触发：需要检查时间窗口和防重复
            echo "manual_trigger=false" >> $GITHUB_OUTPUT
            
            # 获取当前时间信息
            current_utc_hour=$(date -u +%H)
            current_utc_minute=$(date -u +%M)
            current_beijing_hour=$(TZ='Asia/Shanghai' date +%H)
            current_beijing_minute=$(TZ='Asia/Shanghai' date +%M)
            current_date=$(TZ='Asia/Shanghai' date +%Y%m%d)
            day_of_week=$(date -u +%u)  # 1-7 (Monday-Sunday)
            
            echo "当前UTC时间: $current_utc_hour:$current_utc_minute"
            echo "当前北京时间: $current_beijing_hour:$current_beijing_minute"
            echo "当前日期: $current_date, 星期: $day_of_week"
            
            # 初始化
            task_type=""
            should_execute="false"
            
            # 只在工作日执行
            if [ "$day_of_week" -ge "1" ] && [ "$day_of_week" -le "5" ]; then
              
              # 定义时间窗口匹配函数
              check_time_window() {
                local target_hour=$1
                local target_minute=$2
                local window_minutes=$3
                local current_total_minutes=$((current_utc_hour * 60 + current_utc_minute))
                local target_total_minutes=$((target_hour * 60 + target_minute))
                local diff=$((current_total_minutes - target_total_minutes))
                
                # 处理跨天情况
                if [ $diff -lt -720 ]; then
                  diff=$((diff + 1440))
                elif [ $diff -gt 720 ]; then
                  diff=$((diff - 1440))
                fi
                
                if [ $diff -ge 0 ] && [ $diff -le $window_minutes ]; then
                  return 0
                else
                  return 1
                fi
              }
              
              # 检查各个时间窗口（允许30分钟的时间偏差）
              
              # 北京时间7:40 (UTC 23:40前一天) - 韭研公社盘前纪要
              if check_time_window 23 40 30; then
                task_type="jiuyan_morning_memo"
                echo "匹配时间窗口: 韭研公社盘前纪要 (北京时间7:40±30分钟)"
              
              # 北京时间8:00 (UTC 00:00) - 盘前纪要重试
              elif check_time_window 0 0 30; then
                task_type="jiuyan_morning_memo_retry"
                echo "匹配时间窗口: 盘前纪要重试 (北京时间8:00±30分钟)"
              
              # 北京时间8:17 (UTC 00:17) - 韭研公社盘前解读
              elif check_time_window 0 17 30; then
                task_type="jiuyan_morning_analysis"
                echo "匹配时间窗口: 韭研公社盘前解读 (北京时间8:17±30分钟)"
              
              # 北京时间8:27 (UTC 00:27) - 盘前解读重试
              elif check_time_window 0 27 30; then
                task_type="jiuyan_morning_analysis_retry"
                echo "匹配时间窗口: 盘前解读重试 (北京时间8:27±30分钟)"
              
              # 北京时间15:30 (UTC 07:30) - 财联社涨停池数据
              elif check_time_window 7 30 30; then
                task_type="limitup"
                echo "匹配时间窗口: 财联社涨停池数据 (北京时间15:30±30分钟)"
              
              # 北京时间16:00 (UTC 08:00) - 异动解析数据
              elif check_time_window 8 0 30; then
                task_type="analysis"
                echo "匹配时间窗口: 异动解析数据 (北京时间16:00±30分钟)"
              
              # 北京时间23:30 (UTC 15:30) - 韭研公社优秀阿呆
              elif check_time_window 15 30 30; then
                task_type="jiuyan_evening"
                echo "匹配时间窗口: 韭研公社优秀阿呆 (北京时间23:30±30分钟)"
              
              else
                task_type="unknown"
                echo "当前时间不在任何预定义的时间窗口内"
              fi
              
              # 检查是否已经执行过（防重复机制）
              if [ "$task_type" != "unknown" ] && [ "$task_type" != "" ]; then
                lock_file=".github/locks/${task_type}_${current_date}.lock"
                
                if [ -f "$lock_file" ]; then
                  echo "任务 $task_type 在 $current_date 已经执行过，跳过执行"
                  should_execute="false"
                else
                  echo "任务 $task_type 在 $current_date 首次执行，创建锁文件"
                  echo "$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" > "$lock_file"
                  should_execute="true"
                fi
              else
                should_execute="false"
              fi
              
            else
              task_type="weekend"
              should_execute="false"
              echo "周末时间，跳过执行"
            fi
            
            echo "task=$task_type" >> $GITHUB_OUTPUT
            echo "should_execute=$should_execute" >> $GITHUB_OUTPUT
          fi

      # 清理过期的锁文件（保留最近7天）
      - name: 清理过期锁文件
        if: steps.determine-task.outputs.manual_trigger == 'false'
        run: |
          if [ -d ".github/locks" ]; then
            find .github/locks -name "*.lock" -type f -mtime +7 -delete
            echo "已清理7天前的锁文件"
          fi

      # 自动触发的任务执行
      - name: 执行韭研公社盘前纪要
        if: steps.determine-task.outputs.task == 'jiuyan_morning_memo' && steps.determine-task.outputs.should_execute == 'true'
        run: |
          echo "执行韭研公社盘前纪要爬取..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 盘前纪要
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行盘前纪要重试
        if: steps.determine-task.outputs.task == 'jiuyan_morning_memo_retry' && steps.determine-task.outputs.should_execute == 'true'
        run: |
          echo "执行盘前纪要重试..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 盘前纪要
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行韭研公社盘前解读
        if: steps.determine-task.outputs.task == 'jiuyan_morning_analysis' && steps.determine-task.outputs.should_execute == 'true'
        run: |
          echo "执行韭研公社盘前解读爬取..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 盘前解读
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行盘前解读重试
        if: steps.determine-task.outputs.task == 'jiuyan_morning_analysis_retry' && steps.determine-task.outputs.should_execute == 'true'
        run: |
          echo "执行盘前解读重试..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 盘前解读
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行异动解析数据获取
        if: steps.determine-task.outputs.task == 'analysis' && steps.determine-task.outputs.should_execute == 'true'
        run: |
          echo "执行异动解析数据获取..."
          python ${{ steps.script-name.outputs.script_file }} analysis
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行财联社涨停池数据获取
        if: steps.determine-task.outputs.task == 'limitup' && steps.determine-task.outputs.should_execute == 'true'
        run: |
          echo "执行财联社涨停池数据获取..."
          python ${{ steps.script-name.outputs.script_file }} limitup
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 执行韭研公社优秀阿呆文章爬取
        if: steps.determine-task.outputs.task == 'jiuyan_evening' && steps.determine-task.outputs.should_execute == 'true'
        run: |
          echo "执行韭研公社优秀阿呆文章爬取..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan 优秀阿呆
          python ${{ steps.script-name.outputs.script_file }} generate

      # 手动触发的任务执行（无限制）
      - name: 执行所有任务
        if: steps.determine-task.outputs.task == 'all' && steps.determine-task.outputs.manual_trigger == 'true'
        run: |
          echo "手动执行所有任务..."
          python ${{ steps.script-name.outputs.script_file }} all

      - name: 手动执行韭研公社任务
        if: steps.determine-task.outputs.task == 'jiuyan' && steps.determine-task.outputs.manual_trigger == 'true'
        run: |
          echo "手动执行韭研公社任务..."
          python ${{ steps.script-name.outputs.script_file }} jiuyan
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 手动执行异动解析任务
        if: steps.determine-task.outputs.task == 'analysis' && steps.determine-task.outputs.manual_trigger == 'true'
        run: |
          echo "手动执行异动解析任务..."
          python ${{ steps.script-name.outputs.script_file }} analysis
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 手动执行涨停池任务
        if: steps.determine-task.outputs.task == 'limitup' && steps.determine-task.outputs.manual_trigger == 'true'
        run: |
          echo "手动执行涨停池任务..."
          python ${{ steps.script-name.outputs.script_file }} limitup
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 手动生成网页
        if: steps.determine-task.outputs.task == 'generate' && steps.determine-task.outputs.manual_trigger == 'true'
        run: |
          echo "手动生成网页文件..."
          python ${{ steps.script-name.outputs.script_file }} generate

      - name: 检查文件变化
        id: check-changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "发现文件变化:"
            git status --porcelain
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "没有文件变化"
          fi

      - name: 配置 Git
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: 提交更改
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          # 添加所有相关文件（包括锁文件）
          git add data/ articles/ analysis/ assets/ .github/locks/ *.html
          
          # 生成提交信息
          task_name="${{ steps.determine-task.outputs.task }}"
          is_manual="${{ steps.determine-task.outputs.manual_trigger }}"
          
          if [ "$is_manual" = "true" ]; then
            # 手动触发的提交信息
            case $task_name in
              "all")
                commit_msg="手动更新: 所有数据和文章"
                ;;
              "jiuyan")
                commit_msg="手动更新: 韭研公社文章"
                ;;
              "analysis")
                commit_msg="手动更新: 异动解析数据"
                ;;
              "limitup")
                commit_msg="手动更新: 财联社涨停池数据"
                ;;
              "generate")
                commit_msg="手动更新: 重新生成网页文件"
                ;;
              *)
                commit_msg="手动更新: $task_name"
                ;;
            esac
          else
            # 自动触发的提交信息
            case $task_name in
              "jiuyan_morning_memo")
                commit_msg="自动更新: 韭研公社盘前纪要 (北京时间7:40)"
                ;;
              "jiuyan_morning_memo_retry")
                commit_msg="自动更新: 盘前纪要重试 (北京时间8:00)"
                ;;
              "jiuyan_morning_analysis")
                commit_msg="自动更新: 韭研公社盘前解读 (北京时间8:17)"
                ;;
              "jiuyan_morning_analysis_retry")
                commit_msg="自动更新: 盘前解读重试 (北京时间8:27)"
                ;;
              "analysis")
                commit_msg="自动更新: 异动解析数据 (北京时间16:00)"
                ;;
              "limitup")
                commit_msg="自动更新: 财联社涨停池数据 (北京时间15:30)"
                ;;
              "jiuyan_evening")
                commit_msg="自动更新: 韭研公社优秀阿呆文章 (北京时间23:30)"
                ;;
              "unknown")
                commit_msg="未识别时间点的更新"
                ;;
              "weekend")
                commit_msg="周末时间的更新"
                ;;
              *)
                commit_msg="自动更新数据: $task_name"
                ;;
            esac
          fi
          
          git commit -m "$commit_msg ($(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S'))" || echo "No changes to commit"
          git push

      - name: 输出执行结果
        run: |
          echo "=== 执行结果摘要 ==="
          echo "脚本文件: ${{ steps.script-name.outputs.script_file }}"
          echo "任务类型: ${{ steps.determine-task.outputs.task }}"
          echo "触发方式: ${{ github.event_name }}"
          echo "是否手动触发: ${{ steps.determine-task.outputs.manual_trigger }}"
          echo "是否应该执行: ${{ steps.determine-task.outputs.should_execute }}"
          echo "是否有变化: ${{ steps.check-changes.outputs.has_changes }}"
          echo "北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
          echo "UTC时间: $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 显示锁文件状态
          if [ "${{ steps.determine-task.outputs.manual_trigger }}" = "false" ]; then
            echo "=== 锁文件状态 ==="
            if [ -d ".github/locks" ]; then
              echo "当前锁文件:"
              ls -la .github/locks/ || echo "锁文件目录为空"
            else
              echo "锁文件目录不存在"
            fi
          fi
          echo "==================="
